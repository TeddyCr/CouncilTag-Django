from bs4 import BeautifulSoup
import requests
import json
import io
import datetime
import pytz
from calendar import timegm
import re

local_tz = pytz.timezone("America/Los_Angeles")
current_year = datetime.date.today().year
city_council_agendas_url = "https://www.smgov.net/departments/clerk/agendas.aspx"


def get_data(year):
    with requests.Session() as sess:
        state_encoded = '/wEPDwULLTE0OTMxOTQ4OTYPZBYCZg9kFgJmD2QWAgIDEGRkFggCEQ8PFgQeCEltYWdlVXJsBVR+L0FwcF9UaGVtZXMvc21fQ2xlcmsvSW1hZ2VzL1JvdGF0aW5nSGVhZGVyL0NpdHktQ291bmNpbC1DaGFtYmVycy1XaXRoLUNpdHktU2VhbC5qcGceDUFsdGVybmF0ZVRleHQFJENpdHktQ291bmNpbC1DaGFtYmVycy1XaXRoLUNpdHktU2VhbBYCHgZ1c2VtYXAFCiNoZWFkZXJNYXBkAhMPZBYCAgEPFgIeBFRleHQFxwE8TUFQIE5BTUU9ImhlYWRlck1hcCI+PEFSRUEgSFJFRj0iL2RlcGFydG1lbnRzL2NsZXJrLyIgQUxUPSJTYW50YSBNb25pY2EgT2ZmaWNlIG9mIHRoZSBDaXR5IENsZXJrIEhvbWVwYWdlIiBUSVRMRT0iU2FudGEgTW9uaWNhIE9mZmljZSBvZiB0aGUgQ2l0eSBDbGVyayBIb21lIiAgIFNIQVBFPVJFQ1QgQ09PUkRTPSI1LDUsNDAwLDI0MCI+PC9NQVA+ZAIXD2QWAgIBD2QWAmYPZBYGZg9kFgICAQ9kFgQCAQ9kFgICAQ9kFgICAQ8UKwACFCsAAg8WAh4XRW5hYmxlQWpheFNraW5SZW5kZXJpbmdoZBAWDWYCAQICAgMCBAIFAgYCBwIIAgkCCgILAgwWDRQrAAIPFgwfAwUJSG9tZSBQYWdlHgVWYWx1ZQUBMB4LTmF2aWdhdGVVcmwFEy9kZXBhcnRtZW50cy9jbGVyay8eB1Rvb2xUaXAFCUhvbWUgUGFnZR4GVGFyZ2V0BQVfc2VsZh4IU2VsZWN0ZWRoZGQUKwACDxYMHwMFFEJvYXJkcyAmIENvbW1pc3Npb25zHwUFATEfBmUfBwUUQm9hcmRzICYgQ29tbWlzc2lvbnMfCGUfCWhkEBYJZgIBAgICAwIEAgUCBgIHAggWCRQrAAIPFgwfAwUsQm9hcmRzLCBDb21taXNzaW9ucyAmIE90aGVyIEFwcG9pbnRlZCBCb2RpZXMfBQUBMh8GBRovZGVwYXJ0bWVudHMvY2xlcmsvYm9hcmRzLx8HBSxCb2FyZHMsIENvbW1pc3Npb25zICYgT3RoZXIgQXBwb2ludGVkIEJvZGllcx8IBQVfc2VsZh8JaGRkFCsAAg8WDB8DBR8oT3RoZXIpIEVsZWN0ZWQgUmVwcmVzZW50YXRpdmVzHwUFATMfBgUvL0RlcGFydG1lbnRzL0NsZXJrL0VsZWN0ZWRfUmVwcmVzZW50YXRpdmVzLmFzcHgfBwUfKE90aGVyKSBFbGVjdGVkIFJlcHJlc2VudGF0aXZlcx8IBQVfc2VsZh8JaGRkFCsAAg8WDB8DBRhBcHBsaWNhdGlvbnMgJiBWYWNhbmNpZXMfBQUBNB8GBSwvZGVwYXJ0bWVudHMvY2xlcmsvYm9hcmRzL3ZhY2FuY2llc19vbGQuYXNweB8HBRhBcHBsaWNhdGlvbnMgJiBWYWNhbmNpZXMfCAUFX3NlbGYfCWhkZBQrAAIPFgwfAwUYTW9udGhseSBNZWV0aW5nIFNjaGVkdWxlHwUFATUfBgVcL0RlcGFydG1lbnRzL0NsZXJrL0JvYXJkc19hbmRfQ29tbWlzc2lvbnMvQm9hcmRzX19fQ29tbWlzc2lvbnNfTW9udGhseV9NZWV0aW5nX1NjaGVkdWxlLmFzcHgfBwUYTW9udGhseSBNZWV0aW5nIFNjaGVkdWxlHwgFBV9zZWxmHwloZGQUKwACDxYMHwMFFlZpZGVvIE1lZXRpbmcgQXJjaGl2ZXMfBQUBNh8GBRUvQ29udGVudC5hc3B4P2lkPTQyOTIfBwUWVmlkZW8gTWVldGluZyBBcmNoaXZlcx8IBQZfYmxhbmsfCWhkZBQrAAIPFgwfAwUWQXVkaW8gTWVldGluZyBBcmNoaXZlcx8FBQE3HwYFFS9jb250ZW50LmFzcHg/aWQ9NDMxMR8HBRZBdWRpbyBNZWV0aW5nIEFyY2hpdmVzHwgFBl9ibGFuax8JaGRkFCsAAg8WDB8DBR8yMDE4IEJvYXJkL0NvbW1pc3Npb24gVmlkZW8tTkVXHwUFATgfBgUcaHR0cHM6Ly95b3V0dS5iZS9yMGpfMzVUX0VBQR8HBR8yMDE4IEJvYXJkL0NvbW1pc3Npb24gVmlkZW8tTkVXHwgFBl9ibGFuax8JaGRkFCsAAg8WDB8DBR1Ib3cgdG8gUnVuIEVmZmVjdGl2ZSBNZWV0aW5ncx8FBQE5HwYFUmh0dHA6Ly9zYW50YW1vbmljYS5ncmFuaWN1cy5jb20vQVNYLnBocD9wdWJsaXNoX2lkPTY1MCZzbj1zYW50YW1vbmljYS5ncmFuaWN1cy5jb20fBwUdSG93IHRvIFJ1biBFZmZlY3RpdmUgTWVldGluZ3MfCAUGX2JsYW5rHwloZGQUKwACDxYMHwMFBEZBUXMfBQUCMTAfBgVaL0RlcGFydG1lbnRzL0NsZXJrL0JvYXJkc19hbmRfQ29tbWlzc2lvbnMvRkFRc19BYm91dF9TZXJ2aW5nX29uX2FfQm9hcmRfb3JfQ29tbWlzc2lvbi5hc3B4HwcFBEZBUXMfCAUFX3NlbGYfCWhkZA8WCWZmZmZmZmZmZhYBBXRUZWxlcmlrLldlYi5VSS5SYWRQYW5lbEl0ZW0sIFRlbGVyaWsuV2ViLlVJLCBWZXJzaW9uPTIwMDkuMi43MDEuMzUsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49MTIxZmFlNzgxNjViYTNkNBQrAAIPFgwfAwUPQ2hvb3NlIENpdmlsaXR5HwUFAjExHwYFEC9jaG9vc2VjaXZpbGl0eS8fBwUPQ2hvb3NlIENpdmlsaXR5HwgFBV9zZWxmHwloZGQUKwACDxYMHwMFGENpdHkgQ291bmNpbCBJbmZvcm1hdGlvbh8FBQIxMh8GZR8HBRhDaXR5IENvdW5jaWwgSW5mb3JtYXRpb24fCGUfCWhkEBYFZgIBAgICAwIEFgUUKwACDxYMHwMFFUNpdHkgQ291bmNpbCBIb21lcGFnZR8FBQIxMx8GBSlodHRwOi8vd3d3LnNtZ292Lm5ldC9kZXBhcnRtZW50cy9jb3VuY2lsLx8HBRVDaXR5IENvdW5jaWwgSG9tZXBhZ2UfCAUFX3NlbGYfCWhkZBQrAAIPFgwfAwUwQ291bmNpbCBBZ2VuZGFzLCBTdGFmZiBSZXBvcnRzLCBNaW51dGVzICYgVmlkZW9zHwUFAjE0HwYFM2h0dHA6Ly93d3cuc21nb3YubmV0L2RlcGFydG1lbnRzL2NsZXJrL2FnZW5kYXMuYXNweB8HBTBDb3VuY2lsIEFnZW5kYXMsIFN0YWZmIFJlcG9ydHMsIE1pbnV0ZXMgJiBWaWRlb3MfCAUFX3NlbGYfCWhkZBQrAAIPFgwfAwUlUHVibGljIFBvcnRhbCAoUmVjb3JkcyBwcmlvciB0byAxOTg4KR8FBQIxNR8GBTFodHRwczovL3B1YmxpY2RvY3Muc21nb3YubmV0L3dlYmxpbmsvd2VsY29tZS5hc3B4HwcFJVB1YmxpYyBQb3J0YWwgKFJlY29yZHMgcHJpb3IgdG8gMTk4OCkfCAUFX3NlbGYfCWhkZBQrAAIPFgwfAwUvVGF4cGF5ZXIgUHJvdGVjdGlvbi9PYWtzIEluaXRpYXRpdmUgTG9nIChFeGNlbCkfBQUCMTYfBgVML3VwbG9hZGVkRmlsZXMvRGVwYXJ0bWVudHMvQ2xlcmsvVGF4cGF5ZXIgUHJvdGVjdGlvbiBMb2cgKExhc3QgNiB5ZWFycykueGxzeB8HBS9UYXhwYXllciBQcm90ZWN0aW9uL09ha3MgSW5pdGlhdGl2ZSBMb2cgKEV4Y2VsKR8IBQVfc2VsZh8JaGRkFCsAAg8WDB8DBR8oT3RoZXIpIEVsZWN0ZWQgUmVwcmVzZW50YXRpdmVzHwUFAjE3HwYFLy9EZXBhcnRtZW50cy9DbGVyay9FbGVjdGVkX1JlcHJlc2VudGF0aXZlcy5hc3B4HwcFHyhPdGhlcikgRWxlY3RlZCBSZXByZXNlbnRhdGl2ZXMfCAUFX3NlbGYfCWhkZA8WBWZmZmZmFgEFdFRlbGVyaWsuV2ViLlVJLlJhZFBhbmVsSXRlbSwgVGVsZXJpay5XZWIuVUksIFZlcnNpb249MjAwOS4yLjcwMS4zNSwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0xMjFmYWU3ODE2NWJhM2Q0FCsAAg8WDB8DBQxGb3JtcyAmIEZlZXMfBQUCMTgfBgUpL0RlcGFydG1lbnRzL0NsZXJrL0NpdHlfRm9ybXNfX19GZWVzLmFzcHgfBwUMRm9ybXMgJiBGZWVzHwgFBV9zZWxmHwloZGQUKwACDxYMHwMFCUVsZWN0aW9ucx8FBQIxOR8GZR8HBQlFbGVjdGlvbnMfCGUfCWhkEBYDZgIBAgIWAxQrAAIPFgwfAwUJU00gVm90ZXMhHwUFAjIwHwYFFWh0dHA6Ly93d3cuc212b3RlLm9yZx8HBQlTTSBWb3RlcyEfCAUGX2JsYW5rHwloZGQUKwACDxYMHwMFHkNhbXBhaWduIERpc2Nsb3N1cmUgU3RhdGVtZW50cx8FBQIyMR8GBSdodHRwOi8vc212b3RlLm9yZy9Db250ZW50LmFzcHg/aWQ9MjYzNTMfBwUeQ2FtcGFpZ24gRGlzY2xvc3VyZSBTdGF0ZW1lbnRzHwgFBl9ibGFuax8JaGRkFCsAAg8WDB8DBRdFbGVjdGVkIFJlcHJlc2VudGF0aXZlcx8FBQIyMh8GBS8vRGVwYXJ0bWVudHMvQ2xlcmsvRWxlY3RlZF9SZXByZXNlbnRhdGl2ZXMuYXNweB8HBRdFbGVjdGVkIFJlcHJlc2VudGF0aXZlcx8IBQVfc2VsZh8JaGRkDxYDZmZmFgEFdFRlbGVyaWsuV2ViLlVJLlJhZFBhbmVsSXRlbSwgVGVsZXJpay5XZWIuVUksIFZlcnNpb249MjAwOS4yLjcwMS4zNSwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0xMjFmYWU3ODE2NWJhM2Q0FCsAAg8WDB8DBRVMb2JieWlzdCBSZWdpc3RyYXRpb24fBQUCMjMfBgU2L0RlcGFydG1lbnRzL0NsZXJrL0xvYmJ5aXN0L0xvYmJ5aXN0X1JlZ2lzdHJhdGlvbi5hc3B4HwcFFUxvYmJ5aXN0IFJlZ2lzdHJhdGlvbh8IBQVfc2VsZh8JaGRkFCsAAg8WDB8DBR1NdW5pY2lwYWwgQ29kZSAmIENpdHkgQ2hhcnRlch8FBQIyNB8GBSJodHRwOi8vcWNvZGUudXMvY29kZXMvc2FudGFtb25pY2EvHwcFHU11bmljaXBhbCBDb2RlICYgQ2l0eSBDaGFydGVyHwgFBl9ibGFuax8JaGRkFCsAAg8WDB8DBRFQYXNzcG9ydCBTZXJ2aWNlcx8FBQIyNR8GBTsvRGVwYXJ0bWVudHMvQ2xlcmsvUGFzc3BvcnRfU2VydmljZXMvUGFzc3BvcnRfU2VydmljZXMuYXNweB8HBRFQYXNzcG9ydCBTZXJ2aWNlcx8IBQVfc2VsZh8JaGRkFCsAAg8WDB8DBQ1QdWJsaWMgUG9ydGFsHwUFAjI2HwYFMWh0dHBzOi8vcHVibGljZG9jcy5zbWdvdi5uZXQvd2VibGluay93ZWxjb21lLmFzcHgfBwUNUHVibGljIFBvcnRhbB8IBQZfYmxhbmsfCWhkZBQrAAIPFgwfAwUVUmVjb3JkcyBSZXF1ZXN0IC0gTkVXHwUFAjI3HwYFQGh0dHBzOi8vc2FudGFtb25pY2FjYS5teWN1c3RoZWxwLmNvbS9XRUJBUFAvX3JzL3N1cHBvcnRob21lLmFzcHgfBwUVUmVjb3JkcyBSZXF1ZXN0IC0gTkVXHwgFBV9zZWxmHwloZGQUKwACDxYMHwMFGVN1cHBvcnQgU2VydmljZXMgRGl2aXNpb24fBQUCMjgfBgUxL0RlcGFydG1lbnRzL0NsZXJrL1N1cHBvcnRfU2VydmljZXNfRGl2aXNpb24uYXNweB8HBRlTdXBwb3J0IFNlcnZpY2VzIERpdmlzaW9uHwgFBV9zZWxmHwloZGQUKwACDxYMHwMFH1N0YXRlbWVudHMgb2YgRWNvbm9taWMgSW50ZXJlc3QfBQUCMjkfBgUvaHR0cDovL3NzbC5uZXRmaWxlLmNvbS9wdWIvRGVmYXVsdC5hc3B4P2FpZD1DU00fBwUfU3RhdGVtZW50cyBvZiBFY29ub21pYyBJbnRlcmVzdB8IBQVfc2VsZh8JaGRkDxYNZmZmZmZmZmZmZmZmZhYBBXRUZWxlcmlrLldlYi5VSS5SYWRQYW5lbEl0ZW0sIFRlbGVyaWsuV2ViLlVJLCBWZXJzaW9uPTIwMDkuMi43MDEuMzUsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49MTIxZmFlNzgxNjViYTNkNGQWGmYPDxYMHwMFCUhvbWUgUGFnZR8FBQEwHwYFEy9kZXBhcnRtZW50cy9jbGVyay8fBwUJSG9tZSBQYWdlHwgFBV9zZWxmHwloZGQCAQ8PFgwfAwUUQm9hcmRzICYgQ29tbWlzc2lvbnMfBQUBMR8GZR8HBRRCb2FyZHMgJiBDb21taXNzaW9ucx8IZR8JaGQWEmYPDxYMHwMFLEJvYXJkcywgQ29tbWlzc2lvbnMgJiBPdGhlciBBcHBvaW50ZWQgQm9kaWVzHwUFATIfBgUaL2RlcGFydG1lbnRzL2NsZXJrL2JvYXJkcy8fBwUsQm9hcmRzLCBDb21taXNzaW9ucyAmIE90aGVyIEFwcG9pbnRlZCBCb2RpZXMfCAUFX3NlbGYfCWhkZAIBDw8WDB8DBR8oT3RoZXIpIEVsZWN0ZWQgUmVwcmVzZW50YXRpdmVzHwUFATMfBgUvL0RlcGFydG1lbnRzL0NsZXJrL0VsZWN0ZWRfUmVwcmVzZW50YXRpdmVzLmFzcHgfBwUfKE90aGVyKSBFbGVjdGVkIFJlcHJlc2VudGF0aXZlcx8IBQVfc2VsZh8JaGRkAgIPDxYMHwMFGEFwcGxpY2F0aW9ucyAmIFZhY2FuY2llcx8FBQE0HwYFLC9kZXBhcnRtZW50cy9jbGVyay9ib2FyZHMvdmFjYW5jaWVzX29sZC5hc3B4HwcFGEFwcGxpY2F0aW9ucyAmIFZhY2FuY2llcx8IBQVfc2VsZh8JaGRkAgMPDxYMHwMFGE1vbnRobHkgTWVldGluZyBTY2hlZHVsZR8FBQE1HwYFXC9EZXBhcnRtZW50cy9DbGVyay9Cb2FyZHNfYW5kX0NvbW1pc3Npb25zL0JvYXJkc19fX0NvbW1pc3Npb25zX01vbnRobHlfTWVldGluZ19TY2hlZHVsZS5hc3B4HwcFGE1vbnRobHkgTWVldGluZyBTY2hlZHVsZR8IBQVfc2VsZh8JaGRkAgQPDxYMHwMFFlZpZGVvIE1lZXRpbmcgQXJjaGl2ZXMfBQUBNh8GBRUvQ29udGVudC5hc3B4P2lkPTQyOTIfBwUWVmlkZW8gTWVldGluZyBBcmNoaXZlcx8IBQZfYmxhbmsfCWhkZAIFDw8WDB8DBRZBdWRpbyBNZWV0aW5nIEFyY2hpdmVzHwUFATcfBgUVL2NvbnRlbnQuYXNweD9pZD00MzExHwcFFkF1ZGlvIE1lZXRpbmcgQXJjaGl2ZXMfCAUGX2JsYW5rHwloZGQCBg8PFgwfAwUfMjAxOCBCb2FyZC9Db21taXNzaW9uIFZpZGVvLU5FVx8FBQE4HwYFHGh0dHBzOi8veW91dHUuYmUvcjBqXzM1VF9FQUEfBwUfMjAxOCBCb2FyZC9Db21taXNzaW9uIFZpZGVvLU5FVx8IBQZfYmxhbmsfCWhkZAIHDw8WDB8DBR1Ib3cgdG8gUnVuIEVmZmVjdGl2ZSBNZWV0aW5ncx8FBQE5HwYFUmh0dHA6Ly9zYW50YW1vbmljYS5ncmFuaWN1cy5jb20vQVNYLnBocD9wdWJsaXNoX2lkPTY1MCZzbj1zYW50YW1vbmljYS5ncmFuaWN1cy5jb20fBwUdSG93IHRvIFJ1biBFZmZlY3RpdmUgTWVldGluZ3MfCAUGX2JsYW5rHwloZGQCCA8PFgwfAwUERkFRcx8FBQIxMB8GBVovRGVwYXJ0bWVudHMvQ2xlcmsvQm9hcmRzX2FuZF9Db21taXNzaW9ucy9GQVFzX0Fib3V0X1NlcnZpbmdfb25fYV9Cb2FyZF9vcl9Db21taXNzaW9uLmFzcHgfBwUERkFRcx8IBQVfc2VsZh8JaGRkAgIPDxYMHwMFD0Nob29zZSBDaXZpbGl0eR8FBQIxMR8GBRAvY2hvb3NlY2l2aWxpdHkvHwcFD0Nob29zZSBDaXZpbGl0eR8IBQVfc2VsZh8JaGRkAgMPDxYMHwMFGENpdHkgQ291bmNpbCBJbmZvcm1hdGlvbh8FBQIxMh8GZR8HBRhDaXR5IENvdW5jaWwgSW5mb3JtYXRpb24fCGUfCWhkFgpmDw8WDB8DBRVDaXR5IENvdW5jaWwgSG9tZXBhZ2UfBQUCMTMfBgUpaHR0cDovL3d3dy5zbWdvdi5uZXQvZGVwYXJ0bWVudHMvY291bmNpbC8fBwUVQ2l0eSBDb3VuY2lsIEhvbWVwYWdlHwgFBV9zZWxmHwloZGQCAQ8PFgwfAwUwQ291bmNpbCBBZ2VuZGFzLCBTdGFmZiBSZXBvcnRzLCBNaW51dGVzICYgVmlkZW9zHwUFAjE0HwYFM2h0dHA6Ly93d3cuc21nb3YubmV0L2RlcGFydG1lbnRzL2NsZXJrL2FnZW5kYXMuYXNweB8HBTBDb3VuY2lsIEFnZW5kYXMsIFN0YWZmIFJlcG9ydHMsIE1pbnV0ZXMgJiBWaWRlb3MfCAUFX3NlbGYfCWhkZAICDw8WDB8DBSVQdWJsaWMgUG9ydGFsIChSZWNvcmRzIHByaW9yIHRvIDE5ODgpHwUFAjE1HwYFMWh0dHBzOi8vcHVibGljZG9jcy5zbWdvdi5uZXQvd2VibGluay93ZWxjb21lLmFzcHgfBwUlUHVibGljIFBvcnRhbCAoUmVjb3JkcyBwcmlvciB0byAxOTg4KR8IBQVfc2VsZh8JaGRkAgMPDxYMHwMFL1RheHBheWVyIFByb3RlY3Rpb24vT2FrcyBJbml0aWF0aXZlIExvZyAoRXhjZWwpHwUFAjE2HwYFTC91cGxvYWRlZEZpbGVzL0RlcGFydG1lbnRzL0NsZXJrL1RheHBheWVyIFByb3RlY3Rpb24gTG9nIChMYXN0IDYgeWVhcnMpLnhsc3gfBwUvVGF4cGF5ZXIgUHJvdGVjdGlvbi9PYWtzIEluaXRpYXRpdmUgTG9nIChFeGNlbCkfCAUFX3NlbGYfCWhkZAIEDw8WDB8DBR8oT3RoZXIpIEVsZWN0ZWQgUmVwcmVzZW50YXRpdmVzHwUFAjE3HwYFLy9EZXBhcnRtZW50cy9DbGVyay9FbGVjdGVkX1JlcHJlc2VudGF0aXZlcy5hc3B4HwcFHyhPdGhlcikgRWxlY3RlZCBSZXByZXNlbnRhdGl2ZXMfCAUFX3NlbGYfCWhkZAIEDw8WDB8DBQxGb3JtcyAmIEZlZXMfBQUCMTgfBgUpL0RlcGFydG1lbnRzL0NsZXJrL0NpdHlfRm9ybXNfX19GZWVzLmFzcHgfBwUMRm9ybXMgJiBGZWVzHwgFBV9zZWxmHwloZGQCBQ8PFgwfAwUJRWxlY3Rpb25zHwUFAjE5HwZlHwcFCUVsZWN0aW9ucx8IZR8JaGQWBmYPDxYMHwMFCVNNIFZvdGVzIR8FBQIyMB8GBRVodHRwOi8vd3d3LnNtdm90ZS5vcmcfBwUJU00gVm90ZXMhHwgFBl9ibGFuax8JaGRkAgEPDxYMHwMFHkNhbXBhaWduIERpc2Nsb3N1cmUgU3RhdGVtZW50cx8FBQIyMR8GBSdodHRwOi8vc212b3RlLm9yZy9Db250ZW50LmFzcHg/aWQ9MjYzNTMfBwUeQ2FtcGFpZ24gRGlzY2xvc3VyZSBTdGF0ZW1lbnRzHwgFBl9ibGFuax8JaGRkAgIPDxYMHwMFF0VsZWN0ZWQgUmVwcmVzZW50YXRpdmVzHwUFAjIyHwYFLy9EZXBhcnRtZW50cy9DbGVyay9FbGVjdGVkX1JlcHJlc2VudGF0aXZlcy5hc3B4HwcFF0VsZWN0ZWQgUmVwcmVzZW50YXRpdmVzHwgFBV9zZWxmHwloZGQCBg8PFgwfAwUVTG9iYnlpc3QgUmVnaXN0cmF0aW9uHwUFAjIzHwYFNi9EZXBhcnRtZW50cy9DbGVyay9Mb2JieWlzdC9Mb2JieWlzdF9SZWdpc3RyYXRpb24uYXNweB8HBRVMb2JieWlzdCBSZWdpc3RyYXRpb24fCAUFX3NlbGYfCWhkZAIHDw8WDB8DBR1NdW5pY2lwYWwgQ29kZSAmIENpdHkgQ2hhcnRlch8FBQIyNB8GBSJodHRwOi8vcWNvZGUudXMvY29kZXMvc2FudGFtb25pY2EvHwcFHU11bmljaXBhbCBDb2RlICYgQ2l0eSBDaGFydGVyHwgFBl9ibGFuax8JaGRkAggPDxYMHwMFEVBhc3Nwb3J0IFNlcnZpY2VzHwUFAjI1HwYFOy9EZXBhcnRtZW50cy9DbGVyay9QYXNzcG9ydF9TZXJ2aWNlcy9QYXNzcG9ydF9TZXJ2aWNlcy5hc3B4HwcFEVBhc3Nwb3J0IFNlcnZpY2VzHwgFBV9zZWxmHwloZGQCCQ8PFgwfAwUNUHVibGljIFBvcnRhbB8FBQIyNh8GBTFodHRwczovL3B1YmxpY2RvY3Muc21nb3YubmV0L3dlYmxpbmsvd2VsY29tZS5hc3B4HwcFDVB1YmxpYyBQb3J0YWwfCAUGX2JsYW5rHwloZGQCCg8PFgwfAwUVUmVjb3JkcyBSZXF1ZXN0IC0gTkVXHwUFAjI3HwYFQGh0dHBzOi8vc2FudGFtb25pY2FjYS5teWN1c3RoZWxwLmNvbS9XRUJBUFAvX3JzL3N1cHBvcnRob21lLmFzcHgfBwUVUmVjb3JkcyBSZXF1ZXN0IC0gTkVXHwgFBV9zZWxmHwloZGQCCw8PFgwfAwUZU3VwcG9ydCBTZXJ2aWNlcyBEaXZpc2lvbh8FBQIyOB8GBTEvRGVwYXJ0bWVudHMvQ2xlcmsvU3VwcG9ydF9TZXJ2aWNlc19EaXZpc2lvbi5hc3B4HwcFGVN1cHBvcnQgU2VydmljZXMgRGl2aXNpb24fCAUFX3NlbGYfCWhkZAIMDw8WDB8DBR9TdGF0ZW1lbnRzIG9mIEVjb25vbWljIEludGVyZXN0HwUFAjI5HwYFL2h0dHA6Ly9zc2wubmV0ZmlsZS5jb20vcHViL0RlZmF1bHQuYXNweD9haWQ9Q1NNHwcFH1N0YXRlbWVudHMgb2YgRWNvbm9taWMgSW50ZXJlc3QfCAUFX3NlbGYfCWhkZAIFD2QWAmYPDxYCHgdWaXNpYmxlaGRkAgEPZBYCAgEPZBYCAgEPZBYCAgMPZBYGAgEPFgIfAwU0Q291bmNpbCBBZ2VuZGFzLCBTdGFmZiBSZXBvcnRzLCBNaW51dGVzICZhbXA7IFZpZGVvc2QCBQ8QDxYCHgtfIURhdGFCb3VuZGdkEBUfBDIwMTgEMjAxNwQyMDE2BDIwMTUEMjAxNAQyMDEzBDIwMTIEMjAxMQQyMDEwBDIwMDkEMjAwOAQyMDA3BDIwMDYEMjAwNQQyMDA0BDIwMDMEMjAwMgQyMDAxBDIwMDAEMTk5OQQxOTk4BDE5OTcEMTk5NgQxOTk1BDE5OTQEMTk5MwQxOTkyBDE5OTEEMTk5MAQxOTg5BDE5ODgVHwQyMDE4BDIwMTcEMjAxNgQyMDE1BDIwMTQEMjAxMwQyMDEyBDIwMTEEMjAxMAQyMDA5BDIwMDgEMjAwNwQyMDA2BDIwMDUEMjAwNAQyMDAzBDIwMDIEMjAwMQQyMDAwBDE5OTkEMTk5OAQxOTk3BDE5OTYEMTk5NQQxOTk0BDE5OTMEMTk5MgQxOTkxBDE5OTAEMTk4OQQxOTg4FCsDH2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2cWAQIBZAIJDxYCHgtfIUl0ZW1Db3VudAIlFkpmD2QWAmYPFQUTRGVjZW1iZXIgMjYgNTozMCBQTXY8YSBocmVmPSJodHRwOi8vc2FudGFtb25pY2FjaXR5Y2EuaXFtMi5jb20vQ2l0aXplbnMvRGV0YWlsX01lZXRpbmcuYXNweD9JRD0xMTA4IiB0YXJnZXQ9Il9ibGFuayI+TWVldGluZyBDYW5jZWxsZWQ8L2E+AABqPGEgaHJlZj0iLy9zYW50YW1vbmljYS5ncmFuaWN1cy5jb20vVmlld1B1Ymxpc2hlci5waHA/dmlld19pZD0yIiB0YXJnZXQ9Il9ibGFuayI+TWVldGluZyBWaWRlbyBBcmNoaXZlPC9hPmQCAQ9kFgJmDxUFE0RlY2VtYmVyIDEyIDU6MzAgUE1rPGEgaHJlZj0iaHR0cDovL3NhbnRhbW9uaWNhY2l0eWNhLmlxbTIuY29tL0NpdGl6ZW5zL0RldGFpbF9NZWV0aW5nLmFzcHg/SUQ9MTEyOSIgdGFyZ2V0PSJfYmxhbmsiPkFnZW5kYTwvYT4AbjxhIGhyZWY9Imh0dHA6Ly9TYW50YU1vbmljYUNpdHlDQS5JUU0yLmNvbS9DaXRpemVucy9GaWxlT3Blbi5hc3B4P1R5cGU9MTUmSUQ9MTEyNiIgdGFyZ2V0PSJfYmxhbmsiPk1pbnV0ZXM8L2E+cjxhIGhyZWY9Imh0dHA6Ly9zYW50YW1vbmljYS5ncmFuaWN1cy5jb20vTWVkaWFQbGF5ZXIucGhwP3ZpZXdfaWQ9MiZjbGlwX2lkPTQwNDQiIHRhcmdldD0iX2JsYW5rIj5NZWV0aW5nIFZpZGVvPC9hPmQCAg9kFgJmDxUFE0RlY2VtYmVyIDA1IDU6MzAgUE1rPGEgaHJlZj0iaHR0cDovL3NhbnRhbW9uaWNhY2l0eWNhLmlxbTIuY29tL0NpdGl6ZW5zL0RldGFpbF9NZWV0aW5nLmFzcHg/SUQ9MTEwNyIgdGFyZ2V0PSJfYmxhbmsiPkFnZW5kYTwvYT4AbjxhIGhyZWY9Imh0dHA6Ly9TYW50YU1vbmljYUNpdHlDQS5JUU0yLmNvbS9DaXRpemVucy9GaWxlT3Blbi5hc3B4P1R5cGU9MTUmSUQ9MTEyMiIgdGFyZ2V0PSJfYmxhbmsiPk1pbnV0ZXM8L2E+cjxhIGhyZWY9Imh0dHA6Ly9zYW50YW1vbmljYS5ncmFuaWN1cy5jb20vTWVkaWFQbGF5ZXIucGhwP3ZpZXdfaWQ9MiZjbGlwX2lkPTQwNDAiIHRhcmdldD0iX2JsYW5rIj5NZWV0aW5nIFZpZGVvPC9hPmQCAw9kFgJmDxUFE05vdmVtYmVyIDI4IDU6MzAgUE1rPGEgaHJlZj0iaHR0cDovL3NhbnRhbW9uaWNhY2l0eWNhLmlxbTIuY29tL0NpdGl6ZW5zL0RldGFpbF9NZWV0aW5nLmFzcHg/SUQ9MTEwNiIgdGFyZ2V0PSJfYmxhbmsiPkFnZW5kYTwvYT4AbjxhIGhyZWY9Imh0dHA6Ly9TYW50YU1vbmljYUNpdHlDQS5JUU0yLmNvbS9DaXRpemVucy9GaWxlT3Blbi5hc3B4P1R5cGU9MTUmSUQ9MTEyNSIgdGFyZ2V0PSJfYmxhbmsiPk1pbnV0ZXM8L2E+cjxhIGhyZWY9Imh0dHA6Ly9zYW50YW1vbmljYS5ncmFuaWN1cy5jb20vTWVkaWFQbGF5ZXIucGhwP3ZpZXdfaWQ9MiZjbGlwX2lkPTQwMzUiIHRhcmdldD0iX2JsYW5rIj5NZWV0aW5nIFZpZGVvPC9hPmQCBA9kFgJmDxUFE05vdmVtYmVyIDE0IDU6MzAgUE1rPGEgaHJlZj0iaHR0cDovL3NhbnRhbW9uaWNhY2l0eWNhLmlxbTIuY29tL0NpdGl6ZW5zL0RldGFpbF9NZWV0aW5nLmFzcHg/SUQ9MTEwNSIgdGFyZ2V0PSJfYmxhbmsiPkFnZW5kYTwvYT4AbjxhIGhyZWY9Imh0dHA6Ly9TYW50YU1vbmljYUNpdHlDQS5JUU0yLmNvbS9DaXRpemVucy9GaWxlT3Blbi5hc3B4P1R5cGU9MTUmSUQ9MTExMiIgdGFyZ2V0PSJfYmxhbmsiPk1pbnV0ZXM8L2E+cjxhIGhyZWY9Imh0dHA6Ly9zYW50YW1vbmljYS5ncmFuaWN1cy5jb20vTWVkaWFQbGF5ZXIucGhwP3ZpZXdfaWQ9MiZjbGlwX2lkPTQwMzIiIHRhcmdldD0iX2JsYW5rIj5NZWV0aW5nIFZpZGVvPC9hPmQCBQ9kFgJmDxUFEk9jdG9iZXIgMjQgNTozMCBQTWs8YSBocmVmPSJodHRwOi8vc2FudGFtb25pY2FjaXR5Y2EuaXFtMi5jb20vQ2l0aXplbnMvRGV0YWlsX01lZXRpbmcuYXNweD9JRD0xMTA0IiB0YXJnZXQ9Il9ibGFuayI+QWdlbmRhPC9hPgBuPGEgaHJlZj0iaHR0cDovL1NhbnRhTW9uaWNhQ2l0eUNBLklRTTIuY29tL0NpdGl6ZW5zL0ZpbGVPcGVuLmFzcHg/VHlwZT0xNSZJRD0xMTExIiB0YXJnZXQ9Il9ibGFuayI+TWludXRlczwvYT5yPGEgaHJlZj0iaHR0cDovL3NhbnRhbW9uaWNhLmdyYW5pY3VzLmNvbS9NZWRpYVBsYXllci5waHA/dmlld19pZD0yJmNsaXBfaWQ9NDAyMyIgdGFyZ2V0PSJfYmxhbmsiPk1lZXRpbmcgVmlkZW88L2E+ZAIGD2QWAmYPFQUST2N0b2JlciAxMCA1OjMwIFBNazxhIGhyZWY9Imh0dHA6Ly9zYW50YW1vbmljYWNpdHljYS5pcW0yLmNvbS9DaXRpemVucy9EZXRhaWxfTWVldGluZy5hc3B4P0lEPTExMDMiIHRhcmdldD0iX2JsYW5rIj5BZ2VuZGE8L2E+AG48YSBocmVmPSJodHRwOi8vU2FudGFNb25pY2FDaXR5Q0EuSVFNMi5jb20vQ2l0aXplbnMvRmlsZU9wZW4uYXNweD9UeXBlPTE1JklEPTExMTAiIHRhcmdldD0iX2JsYW5rIj5NaW51dGVzPC9hPnI8YSBocmVmPSJodHRwOi8vc2FudGFtb25pY2EuZ3JhbmljdXMuY29tL01lZGlhUGxheWVyLnBocD92aWV3X2lkPTImY2xpcF9pZD00MDA3IiB0YXJnZXQ9Il9ibGFuayI+TWVldGluZyBWaWRlbzwvYT5kAgcPZBYCZg8VBRJPY3RvYmVyIDEwIDQ6MzAgUE1rPGEgaHJlZj0iaHR0cDovL3NhbnRhbW9uaWNhY2l0eWNhLmlxbTIuY29tL0NpdGl6ZW5zL0RldGFpbF9NZWV0aW5nLmFzcHg/SUQ9MTEyMCIgdGFyZ2V0PSJfYmxhbmsiPkFnZW5kYTwvYT4AbjxhIGhyZWY9Imh0dHA6Ly9TYW50YU1vbmljYUNpdHlDQS5JUU0yLmNvbS9DaXRpemVucy9GaWxlT3Blbi5hc3B4P1R5cGU9MTUmSUQ9MTEwOSIgdGFyZ2V0PSJfYmxhbmsiPk1pbnV0ZXM8L2E+cjxhIGhyZWY9Imh0dHA6Ly9zYW50YW1vbmljYS5ncmFuaWN1cy5jb20vTWVkaWFQbGF5ZXIucGhwP3ZpZXdfaWQ9MiZjbGlwX2lkPTQwMDciIHRhcmdldD0iX2JsYW5rIj5NZWV0aW5nIFZpZGVvPC9hPmQCCA9kFgJmDxUFFFNlcHRlbWJlciAyNiA1OjMwIFBNazxhIGhyZWY9Imh0dHA6Ly9zYW50YW1vbmljYWNpdHljYS5pcW0yLmNvbS9DaXRpemVucy9EZXRhaWxfTWVldGluZy5hc3B4P0lEPTExMDIiIHRhcmdldD0iX2JsYW5rIj5BZ2VuZGE8L2E+AG48YSBocmVmPSJodHRwOi8vU2FudGFNb25pY2FDaXR5Q0EuSVFNMi5jb20vQ2l0aXplbnMvRmlsZU9wZW4uYXNweD9UeXBlPTE1JklEPTExMDgiIHRhcmdldD0iX2JsYW5rIj5NaW51dGVzPC9hPnI8YSBocmVmPSJodHRwOi8vc2FudGFtb25pY2EuZ3JhbmljdXMuY29tL01lZGlhUGxheWVyLnBocD92aWV3X2lkPTImY2xpcF9pZD00MDA0IiB0YXJnZXQ9Il9ibGFuayI+TWVldGluZyBWaWRlbzwvYT5kAgkPZBYCZg8VBRRTZXB0ZW1iZXIgMTIgNTozMCBQTWs8YSBocmVmPSJodHRwOi8vc2FudGFtb25pY2FjaXR5Y2EuaXFtMi5jb20vQ2l0aXplbnMvRGV0YWlsX01lZXRpbmcuYXNweD9JRD0xMTAxIiB0YXJnZXQ9Il9ibGFuayI+QWdlbmRhPC9hPgBuPGEgaHJlZj0iaHR0cDovL1NhbnRhTW9uaWNhQ2l0eUNBLklRTTIuY29tL0NpdGl6ZW5zL0ZpbGVPcGVuLmFzcHg/VHlwZT0xNSZJRD0xMTA3IiB0YXJnZXQ9Il9ibGFuayI+TWludXRlczwvYT5yPGEgaHJlZj0iaHR0cDovL3NhbnRhbW9uaWNhLmdyYW5pY3VzLmNvbS9NZWRpYVBsYXllci5waHA/dmlld19pZD0yJmNsaXBfaWQ9Mzk5NyIgdGFyZ2V0PSJfYmxhbmsiPk1lZXRpbmcgVmlkZW88L2E+ZAIKD2QWAmYPFQURQXVndXN0IDIyIDU6MzAgUE12PGEgaHJlZj0iaHR0cDovL3NhbnRhbW9uaWNhY2l0eWNhLmlxbTIuY29tL0NpdGl6ZW5zL0RldGFpbF9NZWV0aW5nLmFzcHg/SUQ9MTEzMSIgdGFyZ2V0PSJfYmxhbmsiPk1lZXRpbmcgQ2FuY2VsbGVkPC9hPgAAajxhIGhyZWY9Ii8vc2FudGFtb25pY2EuZ3JhbmljdXMuY29tL1ZpZXdQdWJsaXNoZXIucGhwP3ZpZXdfaWQ9MiIgdGFyZ2V0PSJfYmxhbmsiPk1lZXRpbmcgVmlkZW8gQXJjaGl2ZTwvYT5kAgsPZBYCZg8VBRFBdWd1c3QgMDggNTozMCBQTWs8YSBocmVmPSJodHRwOi8vc2FudGFtb25pY2FjaXR5Y2EuaXFtMi5jb20vQ2l0aXplbnMvRGV0YWlsX01lZXRpbmcuYXNweD9JRD0xMDk5IiB0YXJnZXQ9Il9ibGFuayI+QWdlbmRhPC9hPgBuPGEgaHJlZj0iaHR0cDovL1NhbnRhTW9uaWNhQ2l0eUNBLklRTTIuY29tL0NpdGl6ZW5zL0ZpbGVPcGVuLmFzcHg/VHlwZT0xNSZJRD0xMTA2IiB0YXJnZXQ9Il9ibGFuayI+TWludXRlczwvYT5yPGEgaHJlZj0iaHR0cDovL3NhbnRhbW9uaWNhLmdyYW5pY3VzLmNvbS9NZWRpYVBsYXllci5waHA/dmlld19pZD0yJmNsaXBfaWQ9Mzk4MyIgdGFyZ2V0PSJfYmxhbmsiPk1lZXRpbmcgVmlkZW88L2E+ZAIMD2QWAmYPFQUPSnVseSAyNSA1OjMwIFBNazxhIGhyZWY9Imh0dHA6Ly9zYW50YW1vbmljYWNpdHljYS5pcW0yLmNvbS9DaXRpemVucy9EZXRhaWxfTWVldGluZy5hc3B4P0lEPTEwOTgiIHRhcmdldD0iX2JsYW5rIj5BZ2VuZGE8L2E+AG48YSBocmVmPSJodHRwOi8vU2FudGFNb25pY2FDaXR5Q0EuSVFNMi5jb20vQ2l0aXplbnMvRmlsZU9wZW4uYXNweD9UeXBlPTE1JklEPTExMDUiIHRhcmdldD0iX2JsYW5rIj5NaW51dGVzPC9hPnI8YSBocmVmPSJodHRwOi8vc2FudGFtb25pY2EuZ3JhbmljdXMuY29tL01lZGlhUGxheWVyLnBocD92aWV3X2lkPTImY2xpcF9pZD0zOTc5IiB0YXJnZXQ9Il9ibGFuayI+TWVldGluZyBWaWRlbzwvYT5kAg0PZBYCZg8VBQ9KdWx5IDI1IDQ6MzAgUE1rPGEgaHJlZj0iaHR0cDovL3NhbnRhbW9uaWNhY2l0eWNhLmlxbTIuY29tL0NpdGl6ZW5zL0RldGFpbF9NZWV0aW5nLmFzcHg/SUQ9MTEzMCIgdGFyZ2V0PSJfYmxhbmsiPkFnZW5kYTwvYT4AbjxhIGhyZWY9Imh0dHA6Ly9TYW50YU1vbmljYUNpdHlDQS5JUU0yLmNvbS9DaXRpemVucy9GaWxlT3Blbi5hc3B4P1R5cGU9MTUmSUQ9MTEwNCIgdGFyZ2V0PSJfYmxhbmsiPk1pbnV0ZXM8L2E+cjxhIGhyZWY9Imh0dHA6Ly9zYW50YW1vbmljYS5ncmFuaWN1cy5jb20vTWVkaWFQbGF5ZXIucGhwP3ZpZXdfaWQ9MiZjbGlwX2lkPTM5NzkiIHRhcmdldD0iX2JsYW5rIj5NZWV0aW5nIFZpZGVvPC9hPmQCDg9kFgJmDxUFD0p1bHkgMTEgNTozMCBQTWs8YSBocmVmPSJodHRwOi8vc2FudGFtb25pY2FjaXR5Y2EuaXFtMi5jb20vQ2l0aXplbnMvRGV0YWlsX01lZXRpbmcuYXNweD9JRD0xMDk3IiB0YXJnZXQ9Il9ibGFuayI+QWdlbmRhPC9hPgBuPGEgaHJlZj0iaHR0cDovL1NhbnRhTW9uaWNhQ2l0eUNBLklRTTIuY29tL0NpdGl6ZW5zL0ZpbGVPcGVuLmFzcHg/VHlwZT0xNSZJRD0xMTAzIiB0YXJnZXQ9Il9ibGFuayI+TWludXRlczwvYT5yPGEgaHJlZj0iaHR0cDovL3NhbnRhbW9uaWNhLmdyYW5pY3VzLmNvbS9NZWRpYVBsYXllci5waHA/dmlld19pZD0yJmNsaXBfaWQ9Mzk3MyIgdGFyZ2V0PSJfYmxhbmsiPk1lZXRpbmcgVmlkZW88L2E+ZAIPD2QWAmYPFQUPSnVseSAxMCA1OjMwIFBNazxhIGhyZWY9Imh0dHA6Ly9zYW50YW1vbmljYWNpdHljYS5pcW0yLmNvbS9DaXRpemVucy9EZXRhaWxfTWVldGluZy5hc3B4P0lEPTExMjYiIHRhcmdldD0iX2JsYW5rIj5BZ2VuZGE8L2E+AG48YSBocmVmPSJodHRwOi8vU2FudGFNb25pY2FDaXR5Q0EuSVFNMi5jb20vQ2l0aXplbnMvRmlsZU9wZW4uYXNweD9UeXBlPTE1JklEPTExMDIiIHRhcmdldD0iX2JsYW5rIj5NaW51dGVzPC9hPnI8YSBocmVmPSJodHRwOi8vc2FudGFtb25pY2EuZ3JhbmljdXMuY29tL01lZGlhUGxheWVyLnBocD92aWV3X2lkPTImY2xpcF9pZD0zOTcyIiB0YXJnZXQ9Il9ibGFuayI+TWVldGluZyBWaWRlbzwvYT5kAhAPZBYCZg8VBQ9KdW5lIDI3IDU6MzAgUE1rPGEgaHJlZj0iaHR0cDovL3NhbnRhbW9uaWNhY2l0eWNhLmlxbTIuY29tL0NpdGl6ZW5zL0RldGFpbF9NZWV0aW5nLmFzcHg/SUQ9MTA5NiIgdGFyZ2V0PSJfYmxhbmsiPkFnZW5kYTwvYT4AbjxhIGhyZWY9Imh0dHA6Ly9TYW50YU1vbmljYUNpdHlDQS5JUU0yLmNvbS9DaXRpemVucy9GaWxlT3Blbi5hc3B4P1R5cGU9MTUmSUQ9MTEwMCIgdGFyZ2V0PSJfYmxhbmsiPk1pbnV0ZXM8L2E+cjxhIGhyZWY9Imh0dHA6Ly9zYW50YW1vbmljYS5ncmFuaWN1cy5jb20vTWVkaWFQbGF5ZXIucGhwP3ZpZXdfaWQ9MiZjbGlwX2lkPTM5NjgiIHRhcmdldD0iX2JsYW5rIj5NZWV0aW5nIFZpZGVvPC9hPmQCEQ9kFgJmDxUFD0p1bmUgMjcgNDozMCBQTWs8YSBocmVmPSJodHRwOi8vc2FudGFtb25pY2FjaXR5Y2EuaXFtMi5jb20vQ2l0aXplbnMvRGV0YWlsX01lZXRpbmcuYXNweD9JRD0xMTI1IiB0YXJnZXQ9Il9ibGFuayI+QWdlbmRhPC9hPgBuPGEgaHJlZj0iaHR0cDovL1NhbnRhTW9uaWNhQ2l0eUNBLklRTTIuY29tL0NpdGl6ZW5zL0ZpbGVPcGVuLmFzcHg/VHlwZT0xNSZJRD0xMDk5IiB0YXJnZXQ9Il9ibGFuayI+TWludXRlczwvYT5yPGEgaHJlZj0iaHR0cDovL3NhbnRhbW9uaWNhLmdyYW5pY3VzLmNvbS9NZWRpYVBsYXllci5waHA/dmlld19pZD0yJmNsaXBfaWQ9Mzk2OCIgdGFyZ2V0PSJfYmxhbmsiPk1lZXRpbmcgVmlkZW88L2E+ZAISD2QWAmYPFQUPSnVuZSAxMyA1OjMwIFBNazxhIGhyZWY9Imh0dHA6Ly9zYW50YW1vbmljYWNpdHljYS5pcW0yLmNvbS9DaXRpemVucy9EZXRhaWxfTWVldGluZy5hc3B4P0lEPTEwOTUiIHRhcmdldD0iX2JsYW5rIj5BZ2VuZGE8L2E+AG48YSBocmVmPSJodHRwOi8vU2FudGFNb25pY2FDaXR5Q0EuSVFNMi5jb20vQ2l0aXplbnMvRmlsZU9wZW4uYXNweD9UeXBlPTE1JklEPTEwOTgiIHRhcmdldD0iX2JsYW5rIj5NaW51dGVzPC9hPnI8YSBocmVmPSJodHRwOi8vc2FudGFtb25pY2EuZ3JhbmljdXMuY29tL01lZGlhUGxheWVyLnBocD92aWV3X2lkPTImY2xpcF9pZD0zOTYwIiB0YXJnZXQ9Il9ibGFuayI+TWVldGluZyBWaWRlbzwvYT5kAhMPZBYCZg8VBQ9KdW5lIDA1IDY6MDAgUE1rPGEgaHJlZj0iaHR0cDovL3NhbnRhbW9uaWNhY2l0eWNhLmlxbTIuY29tL0NpdGl6ZW5zL0RldGFpbF9NZWV0aW5nLmFzcHg/SUQ9MTEyOCIgdGFyZ2V0PSJfYmxhbmsiPkFnZW5kYTwvYT4AbjxhIGhyZWY9Imh0dHA6Ly9TYW50YU1vbmljYUNpdHlDQS5JUU0yLmNvbS9DaXRpemVucy9GaWxlT3Blbi5hc3B4P1R5cGU9MTUmSUQ9MTA5NyIgdGFyZ2V0PSJfYmxhbmsiPk1pbnV0ZXM8L2E+ajxhIGhyZWY9Ii8vc2FudGFtb25pY2EuZ3JhbmljdXMuY29tL1ZpZXdQdWJsaXNoZXIucGhwP3ZpZXdfaWQ9MiIgdGFyZ2V0PSJfYmxhbmsiPk1lZXRpbmcgVmlkZW8gQXJjaGl2ZTwvYT5kAhQPZBYCZg8VBQ5NYXkgMjQgNDowMCBQTWs8YSBocmVmPSJodHRwOi8vc2FudGFtb25pY2FjaXR5Y2EuaXFtMi5jb20vQ2l0aXplbnMvRGV0YWlsX01lZXRpbmcuYXNweD9JRD0xMTE3IiB0YXJnZXQ9Il9ibGFuayI+QWdlbmRhPC9hPgBuPGEgaHJlZj0iaHR0cDovL1NhbnRhTW9uaWNhQ2l0eUNBLklRTTIuY29tL0NpdGl6ZW5zL0ZpbGVPcGVuLmFzcHg/VHlwZT0xNSZJRD0xMTAxIiB0YXJnZXQ9Il9ibGFuayI+TWludXRlczwvYT5yPGEgaHJlZj0iaHR0cDovL3NhbnRhbW9uaWNhLmdyYW5pY3VzLmNvbS9NZWRpYVBsYXllci5waHA/dmlld19pZD0yJmNsaXBfaWQ9Mzk0OSIgdGFyZ2V0PSJfYmxhbmsiPk1lZXRpbmcgVmlkZW88L2E+ZAIVD2QWAmYPFQUOTWF5IDIzIDU6MzAgUE1rPGEgaHJlZj0iaHR0cDovL3NhbnRhbW9uaWNhY2l0eWNhLmlxbTIuY29tL0NpdGl6ZW5zL0RldGFpbF9NZWV0aW5nLmFzcHg/SUQ9MTA5NCIgdGFyZ2V0PSJfYmxhbmsiPkFnZW5kYTwvYT4AbjxhIGhyZWY9Imh0dHA6Ly9TYW50YU1vbmljYUNpdHlDQS5JUU0yLmNvbS9DaXRpemVucy9GaWxlT3Blbi5hc3B4P1R5cGU9MTUmSUQ9MTA5NiIgdGFyZ2V0PSJfYmxhbmsiPk1pbnV0ZXM8L2E+cjxhIGhyZWY9Imh0dHA6Ly9zYW50YW1vbmljYS5ncmFuaWN1cy5jb20vTWVkaWFQbGF5ZXIucGhwP3ZpZXdfaWQ9MiZjbGlwX2lkPTM5NDciIHRhcmdldD0iX2JsYW5rIj5NZWV0aW5nIFZpZGVvPC9hPmQCFg9kFgJmDxUFDk1heSAyMyA0OjMwIFBNazxhIGhyZWY9Imh0dHA6Ly9zYW50YW1vbmljYWNpdHljYS5pcW0yLmNvbS9DaXRpemVucy9EZXRhaWxfTWVldGluZy5hc3B4P0lEPTExMjQiIHRhcmdldD0iX2JsYW5rIj5BZ2VuZGE8L2E+AG48YSBocmVmPSJodHRwOi8vU2FudGFNb25pY2FDaXR5Q0EuSVFNMi5jb20vQ2l0aXplbnMvRmlsZU9wZW4uYXNweD9UeXBlPTE1JklEPTEwOTUiIHRhcmdldD0iX2JsYW5rIj5NaW51dGVzPC9hPnI8YSBocmVmPSJodHRwOi8vc2FudGFtb25pY2EuZ3JhbmljdXMuY29tL01lZGlhUGxheWVyLnBocD92aWV3X2lkPTImY2xpcF9pZD0zOTQ3IiB0YXJnZXQ9Il9ibGFuayI+TWVldGluZyBWaWRlbzwvYT5kAhcPZBYCZg8VBQ5NYXkgMDkgNTozMCBQTWs8YSBocmVmPSJodHRwOi8vc2FudGFtb25pY2FjaXR5Y2EuaXFtMi5jb20vQ2l0aXplbnMvRGV0YWlsX01lZXRpbmcuYXNweD9JRD0xMDkzIiB0YXJnZXQ9Il9ibGFuayI+QWdlbmRhPC9hPgBuPGEgaHJlZj0iaHR0cDovL1NhbnRhTW9uaWNhQ2l0eUNBLklRTTIuY29tL0NpdGl6ZW5zL0ZpbGVPcGVuLmFzcHg/VHlwZT0xNSZJRD0xMDk0IiB0YXJnZXQ9Il9ibGFuayI+TWludXRlczwvYT5yPGEgaHJlZj0iaHR0cDovL3NhbnRhbW9uaWNhLmdyYW5pY3VzLmNvbS9NZWRpYVBsYXllci5waHA/dmlld19pZD0yJmNsaXBfaWQ9MzkzNSIgdGFyZ2V0PSJfYmxhbmsiPk1lZXRpbmcgVmlkZW88L2E+ZAIYD2QWAmYPFQUOTWF5IDA5IDM6MzAgUE1rPGEgaHJlZj0iaHR0cDovL3NhbnRhbW9uaWNhY2l0eWNhLmlxbTIuY29tL0NpdGl6ZW5zL0RldGFpbF9NZWV0aW5nLmFzcHg/SUQ9MTEyMyIgdGFyZ2V0PSJfYmxhbmsiPkFnZW5kYTwvYT4AbjxhIGhyZWY9Imh0dHA6Ly9TYW50YU1vbmljYUNpdHlDQS5JUU0yLmNvbS9DaXRpemVucy9GaWxlT3Blbi5hc3B4P1R5cGU9MTUmSUQ9MTA5MyIgdGFyZ2V0PSJfYmxhbmsiPk1pbnV0ZXM8L2E+cjxhIGhyZWY9Imh0dHA6Ly9zYW50YW1vbmljYS5ncmFuaWN1cy5jb20vTWVkaWFQbGF5ZXIucGhwP3ZpZXdfaWQ9MiZjbGlwX2lkPTM5MzUiIHRhcmdldD0iX2JsYW5rIj5NZWV0aW5nIFZpZGVvPC9hPmQCGQ9kFgJmDxUFEUFwcmlsIDI5IDEwOjAwIEFNazxhIGhyZWY9Imh0dHA6Ly9zYW50YW1vbmljYWNpdHljYS5pcW0yLmNvbS9DaXRpemVucy9EZXRhaWxfTWVldGluZy5hc3B4P0lEPTExMjIiIHRhcmdldD0iX2JsYW5rIj5BZ2VuZGE8L2E+AG48YSBocmVmPSJodHRwOi8vU2FudGFNb25pY2FDaXR5Q0EuSVFNMi5jb20vQ2l0aXplbnMvRmlsZU9wZW4uYXNweD9UeXBlPTE1JklEPTEwOTEiIHRhcmdldD0iX2JsYW5rIj5NaW51dGVzPC9hPmo8YSBocmVmPSIvL3NhbnRhbW9uaWNhLmdyYW5pY3VzLmNvbS9WaWV3UHVibGlzaGVyLnBocD92aWV3X2lkPTIiIHRhcmdldD0iX2JsYW5rIj5NZWV0aW5nIFZpZGVvIEFyY2hpdmU8L2E+ZAIaD2QWAmYPFQUQQXByaWwgMjUgNTozMCBQTWs8YSBocmVmPSJodHRwOi8vc2FudGFtb25pY2FjaXR5Y2EuaXFtMi5jb20vQ2l0aXplbnMvRGV0YWlsX01lZXRpbmcuYXNweD9JRD0xMDkyIiB0YXJnZXQ9Il9ibGFuayI+QWdlbmRhPC9hPgBuPGEgaHJlZj0iaHR0cDovL1NhbnRhTW9uaWNhQ2l0eUNBLklRTTIuY29tL0NpdGl6ZW5zL0ZpbGVPcGVuLmFzcHg/VHlwZT0xNSZJRD0xMDkyIiB0YXJnZXQ9Il9ibGFuayI+TWludXRlczwvYT5yPGEgaHJlZj0iaHR0cDovL3NhbnRhbW9uaWNhLmdyYW5pY3VzLmNvbS9NZWRpYVBsYXllci5waHA/dmlld19pZD0yJmNsaXBfaWQ9MzkyNyIgdGFyZ2V0PSJfYmxhbmsiPk1lZXRpbmcgVmlkZW88L2E+ZAIbD2QWAmYPFQUQQXByaWwgMTggNDozMCBQTWs8YSBocmVmPSJodHRwOi8vc2FudGFtb25pY2FjaXR5Y2EuaXFtMi5jb20vQ2l0aXplbnMvRGV0YWlsX01lZXRpbmcuYXNweD9JRD0xMDkxIiB0YXJnZXQ9Il9ibGFuayI+QWdlbmRhPC9hPgBuPGEgaHJlZj0iaHR0cDovL1NhbnRhTW9uaWNhQ2l0eUNBLklRTTIuY29tL0NpdGl6ZW5zL0ZpbGVPcGVuLmFzcHg/VHlwZT0xNSZJRD0xMDkwIiB0YXJnZXQ9Il9ibGFuayI+TWludXRlczwvYT5yPGEgaHJlZj0iaHR0cDovL3NhbnRhbW9uaWNhLmdyYW5pY3VzLmNvbS9NZWRpYVBsYXllci5waHA/dmlld19pZD0yJmNsaXBfaWQ9MzkyMiIgdGFyZ2V0PSJfYmxhbmsiPk1lZXRpbmcgVmlkZW88L2E+ZAIcD2QWAmYPFQUQTWFyY2ggMjggNTozMCBQTWs8YSBocmVmPSJodHRwOi8vc2FudGFtb25pY2FjaXR5Y2EuaXFtMi5jb20vQ2l0aXplbnMvRGV0YWlsX01lZXRpbmcuYXNweD9JRD0xMDkwIiB0YXJnZXQ9Il9ibGFuayI+QWdlbmRhPC9hPgBuPGEgaHJlZj0iaHR0cDovL1NhbnRhTW9uaWNhQ2l0eUNBLklRTTIuY29tL0NpdGl6ZW5zL0ZpbGVPcGVuLmFzcHg/VHlwZT0xNSZJRD0xMDg5IiB0YXJnZXQ9Il9ibGFuayI+TWludXRlczwvYT5yPGEgaHJlZj0iaHR0cDovL3NhbnRhbW9uaWNhLmdyYW5pY3VzLmNvbS9NZWRpYVBsYXllci5waHA/dmlld19pZD0yJmNsaXBfaWQ9MzkxNiIgdGFyZ2V0PSJfYmxhbmsiPk1lZXRpbmcgVmlkZW88L2E+ZAIdD2QWAmYPFQURTWFyY2ggMjUgMTA6MDAgQU1rPGEgaHJlZj0iaHR0cDovL3NhbnRhbW9uaWNhY2l0eWNhLmlxbTIuY29tL0NpdGl6ZW5zL0RldGFpbF9NZWV0aW5nLmFzcHg/SUQ9MTExOCIgdGFyZ2V0PSJfYmxhbmsiPkFnZW5kYTwvYT4AbjxhIGhyZWY9Imh0dHA6Ly9TYW50YU1vbmljYUNpdHlDQS5JUU0yLmNvbS9DaXRpemVucy9GaWxlT3Blbi5hc3B4P1R5cGU9MTUmSUQ9MTA4NyIgdGFyZ2V0PSJfYmxhbmsiPk1pbnV0ZXM8L2E+ajxhIGhyZWY9Ii8vc2FudGFtb25pY2EuZ3JhbmljdXMuY29tL1ZpZXdQdWJsaXNoZXIucGhwP3ZpZXdfaWQ9MiIgdGFyZ2V0PSJfYmxhbmsiPk1lZXRpbmcgVmlkZW8gQXJjaGl2ZTwvYT5kAh4PZBYCZg8VBRBNYXJjaCAwNyA1OjMwIFBNazxhIGhyZWY9Imh0dHA6Ly9zYW50YW1vbmljYWNpdHljYS5pcW0yLmNvbS9DaXRpemVucy9EZXRhaWxfTWVldGluZy5hc3B4P0lEPTEwODkiIHRhcmdldD0iX2JsYW5rIj5BZ2VuZGE8L2E+AG48YSBocmVmPSJodHRwOi8vU2FudGFNb25pY2FDaXR5Q0EuSVFNMi5jb20vQ2l0aXplbnMvRmlsZU9wZW4uYXNweD9UeXBlPTE1JklEPTEwODMiIHRhcmdldD0iX2JsYW5rIj5NaW51dGVzPC9hPnI8YSBocmVmPSJodHRwOi8vc2FudGFtb25pY2EuZ3JhbmljdXMuY29tL01lZGlhUGxheWVyLnBocD92aWV3X2lkPTImY2xpcF9pZD0zOTAwIiB0YXJnZXQ9Il9ibGFuayI+TWVldGluZyBWaWRlbzwvYT5kAh8PZBYCZg8VBRNGZWJydWFyeSAyOCA1OjMwIFBNazxhIGhyZWY9Imh0dHA6Ly9zYW50YW1vbmljYWNpdHljYS5pcW0yLmNvbS9DaXRpemVucy9EZXRhaWxfTWVldGluZy5hc3B4P0lEPTEwODgiIHRhcmdldD0iX2JsYW5rIj5BZ2VuZGE8L2E+AG48YSBocmVmPSJodHRwOi8vU2FudGFNb25pY2FDaXR5Q0EuSVFNMi5jb20vQ2l0aXplbnMvRmlsZU9wZW4uYXNweD9UeXBlPTE1JklEPTEwODYiIHRhcmdldD0iX2JsYW5rIj5NaW51dGVzPC9hPnI8YSBocmVmPSJodHRwOi8vc2FudGFtb25pY2EuZ3JhbmljdXMuY29tL01lZGlhUGxheWVyLnBocD92aWV3X2lkPTImY2xpcF9pZD0zODk2IiB0YXJnZXQ9Il9ibGFuayI+TWVldGluZyBWaWRlbzwvYT5kAiAPZBYCZg8VBRNGZWJydWFyeSAxNCA1OjMwIFBNazxhIGhyZWY9Imh0dHA6Ly9zYW50YW1vbmljYWNpdHljYS5pcW0yLmNvbS9DaXRpemVucy9EZXRhaWxfTWVldGluZy5hc3B4P0lEPTEwODciIHRhcmdldD0iX2JsYW5rIj5BZ2VuZGE8L2E+AG48YSBocmVmPSJodHRwOi8vU2FudGFNb25pY2FDaXR5Q0EuSVFNMi5jb20vQ2l0aXplbnMvRmlsZU9wZW4uYXNweD9UeXBlPTE1JklEPTEwODUiIHRhcmdldD0iX2JsYW5rIj5NaW51dGVzPC9hPnI8YSBocmVmPSJodHRwOi8vc2FudGFtb25pY2EuZ3JhbmljdXMuY29tL01lZGlhUGxheWVyLnBocD92aWV3X2lkPTImY2xpcF9pZD0zODg3IiB0YXJnZXQ9Il9ibGFuayI+TWVldGluZyBWaWRlbzwvYT5kAiEPZBYCZg8VBRJKYW51YXJ5IDI4IDk6MDAgQU1rPGEgaHJlZj0iaHR0cDovL3NhbnRhbW9uaWNhY2l0eWNhLmlxbTIuY29tL0NpdGl6ZW5zL0RldGFpbF9NZWV0aW5nLmFzcHg/SUQ9MTExNiIgdGFyZ2V0PSJfYmxhbmsiPkFnZW5kYTwvYT4AbjxhIGhyZWY9Imh0dHA6Ly9TYW50YU1vbmljYUNpdHlDQS5JUU0yLmNvbS9DaXRpemVucy9GaWxlT3Blbi5hc3B4P1R5cGU9MTUmSUQ9MTA4NCIgdGFyZ2V0PSJfYmxhbmsiPk1pbnV0ZXM8L2E+cjxhIGhyZWY9Imh0dHA6Ly9zYW50YW1vbmljYS5ncmFuaWN1cy5jb20vTWVkaWFQbGF5ZXIucGhwP3ZpZXdfaWQ9MiZjbGlwX2lkPTM4OTAiIHRhcmdldD0iX2JsYW5rIj5NZWV0aW5nIFZpZGVvPC9hPmQCIg9kFgJmDxUFEkphbnVhcnkgMjQgNTozMCBQTWs8YSBocmVmPSJodHRwOi8vc2FudGFtb25pY2FjaXR5Y2EuaXFtMi5jb20vQ2l0aXplbnMvRGV0YWlsX01lZXRpbmcuYXNweD9JRD0xMDg2IiB0YXJnZXQ9Il9ibGFuayI+QWdlbmRhPC9hPgBuPGEgaHJlZj0iaHR0cDovL1NhbnRhTW9uaWNhQ2l0eUNBLklRTTIuY29tL0NpdGl6ZW5zL0ZpbGVPcGVuLmFzcHg/VHlwZT0xNSZJRD0xMDgyIiB0YXJnZXQ9Il9ibGFuayI+TWludXRlczwvYT5yPGEgaHJlZj0iaHR0cDovL3NhbnRhbW9uaWNhLmdyYW5pY3VzLmNvbS9NZWRpYVBsYXllci5waHA/dmlld19pZD0yJmNsaXBfaWQ9Mzg3MiIgdGFyZ2V0PSJfYmxhbmsiPk1lZXRpbmcgVmlkZW88L2E+ZAIjD2QWAmYPFQUSSmFudWFyeSAxOCA2OjAwIFBNazxhIGhyZWY9Imh0dHA6Ly9zYW50YW1vbmljYWNpdHljYS5pcW0yLmNvbS9DaXRpemVucy9EZXRhaWxfTWVldGluZy5hc3B4P0lEPTExMTUiIHRhcmdldD0iX2JsYW5rIj5BZ2VuZGE8L2E+AG48YSBocmVmPSJodHRwOi8vU2FudGFNb25pY2FDaXR5Q0EuSVFNMi5jb20vQ2l0aXplbnMvRmlsZU9wZW4uYXNweD9UeXBlPTE1JklEPTEwODAiIHRhcmdldD0iX2JsYW5rIj5NaW51dGVzPC9hPnI8YSBocmVmPSJodHRwOi8vc2FudGFtb25pY2EuZ3JhbmljdXMuY29tL01lZGlhUGxheWVyLnBocD92aWV3X2lkPTImY2xpcF9pZD0zODYwIiB0YXJnZXQ9Il9ibGFuayI+TWVldGluZyBWaWRlbzwvYT5kAiQPZBYCZg8VBRJKYW51YXJ5IDEwIDU6MzAgUE1rPGEgaHJlZj0iaHR0cDovL3NhbnRhbW9uaWNhY2l0eWNhLmlxbTIuY29tL0NpdGl6ZW5zL0RldGFpbF9NZWV0aW5nLmFzcHg/SUQ9MTA4NSIgdGFyZ2V0PSJfYmxhbmsiPkFnZW5kYTwvYT4AbjxhIGhyZWY9Imh0dHA6Ly9TYW50YU1vbmljYUNpdHlDQS5JUU0yLmNvbS9DaXRpemVucy9GaWxlT3Blbi5hc3B4P1R5cGU9MTUmSUQ9MTA3OSIgdGFyZ2V0PSJfYmxhbmsiPk1pbnV0ZXM8L2E+ajxhIGhyZWY9Ii8vc2FudGFtb25pY2EuZ3JhbmljdXMuY29tL1ZpZXdQdWJsaXNoZXIucGhwP3ZpZXdfaWQ9MiIgdGFyZ2V0PSJfYmxhbmsiPk1lZXRpbmcgVmlkZW8gQXJjaGl2ZTwvYT5kAgIPFgIfCmhkAhkPZBYCZg8WAh8DBSpDaXR5IG9mIFNhbnRhIE1vbmljYSZuYnNwOyYjMTY5OyZuYnNwOzIwMThkGAEFHl9fQ29udHJvbHNSZXF1aXJlUG9zdEJhY2tLZXlfXxYBBSpjdGwwMCRjdGwwMCR2ZXJ0aWNhbExlZnRCYXIkbWFpbk1lbnUkY3RsMDD/3eyL8mby2LrlW5q7Dqa6ObqU0mYIhZxR8jpwRPmAyA=='
        payload = {
            "__EVENTTARGET": 'ctl00$ctl00$bodyContent$mainContent$ddlYears',
            "__EVENTARGUMENT": '',
            "__LASTFOCUS": '',
            "__VIEWSTATE": state_encoded,
            "__VIEWSTATEGENERATOR": '0072609D',
            "__EVENTVALIDATION": '/wEdACNIEPIK6907Rytq6F/nNnflmZnDb6ISpcvG865ChG769Wk0LM5+UfY5xCA+9tU1+LliBw+AAtqRG2rCRXqUtZgKClIJ7GykSJOig7+2A4wJ4BYv2+eqZuQ161WUyH5guiMzQhMk5XG/xqiKn0dQCEa9LfCqzIhjzRrKCJTz8NGty7MvJPj9B6ISBoCTj1sLAz7xScII9CxqFo1XpwziCfgSgkJgpF+YLSxo/pMulnHWDj4RUESCJFnNqcAiyRQViaRctbdfjV6+gj8+2/YXgPzAx2JtNO6Uqk0Qr3TBkBwcAhYqJD08yxewJDVETiDFrG7h4+3OWoa5qDLBnfdQlHCT7k0T7DYG785uDg62aUK6kwIYtcWRQ8GD47g88jOjHwpSQ1goPdoZz7kzQr/ySzmCXCGKccSVWRPEcLgr7Gqw17UXOgl7MhFM7DNCmRoUhkj7xo1gT5dReFaEiq7d64b7q6qdAOJCBUyxDA9SpPIQTuH6ZgrzGq0UXzO/VWHC6UDFu/miQk80B0TJ8DKeezeJwhIIX6qlqX8VTfquPEBWgIZ9nBH3HdEjJEzaG4tvsRosazoHmT4R2JFAOe4Hjfvxy72Gbhf3k6OHGh/YESp1Zz9ck/KQKCtW3sCKGlae3zUzGKqcZ6CQJJlZGT/bU/20RL/5aDaGW7+L6sbvEAtxWAx9/L8xvPxAHLl4Xf7CO+OTSPTUoNo4JISrPCiV6DL6betJ+dWiDR9pVIILRdinPMTvtzMmFXjTX/dcd8/GF5ML2n4osnpg1BwY9ex7lS9v',
            "ctl00_ctl00_verticalLeftBar_mainMenu_ctl00_ClientState": "",
            "ctl00$ctl00$bodyContent$mainContent$ddlYears": year,
            "ctl00$ctl00$bodyContent$mainContent$CouncilSearch$txtSearch": ""
        }
        r = sess.post(city_council_agendas_url, data=payload)
        soup = BeautifulSoup(r.text, 'html.parser')
        agendas = dict()
        table = soup.find('table', {'class': 'agendaTable'})
        rows = table.findAll('tr')
        for row in rows:
            cells = row.findChildren('td')
            try:
                date = agenda_date_to_epoch(cells[0])
            except:
                date = None
            if date and cells[1].string == "Agenda":
                agenda = sess.get(cells[1].findChildren(
                    'a', {'href': True})[0]['href']).text
                if "CONSENT CALENDAR" in agenda:
                    agendas[date] = scrape_agenda(agenda, sess)
    return agendas


def agenda_date_to_epoch(date_str):
    '''Transforms scraped date to epoch time'''
    naive_dt = datetime.datetime.strptime(
        str(current_year) + " " + date_str.string.strip(), '%Y %B %d %I:%M %p')
    local_dt = local_tz.localize(naive_dt, is_dst=None)
    utc_dt = local_dt.astimezone(pytz.utc)
    utc_timetuple = utc_dt.timetuple()
    return timegm(utc_timetuple)


def scrape_agenda(agenda, sess):
    # Searches the entire HTML text for the words since it's not yet parsed into html by BS
    soup_agenda = BeautifulSoup(agenda, 'html.parser')
    tableMeeting = soup_agenda.find('table', {'id': 'MeetingDetail'})
    string_sections = tableMeeting.find_all('strong')
    parent = string_sections[0].find_parent("tr")
    next_siblings = parent.find_next_siblings("tr")
    # staff_reports = {} This and commented code block below can be used to automatically group reports by Category
    staff_reports = []
    reports_holder = []

    for sibling in next_siblings:
        if sibling.find('strong'):
            if len(reports_holder) != 0:
                staff_reports.append(reports_holder)
                reports_holder = []
            #     staff_reports[agenda_group] = reports_holder
            #     reports_holder = []
            # agenda_heading = re.match('^(\d+)\..*', sibling.text)
            # if agenda_heading:
            #     agenda_group = agenda_heading.group(1)
        else:
            cells = sibling.find_all('td')
            if len(cells) > 2 and u'Title' in cells[2]['class']:
                staff_report = cells[2].find('a', {'href': True})
                if staff_report is None:
                    continue
                staff_report_href = 'http://santamonicacityca.iqm2.com/Citizens/' + \
                    staff_report['href']
                try:
                    staff_report_r = sess.get(staff_report_href)
                    staff_report_html = staff_report_r.text
                    s_r_processed = process_staff_report(staff_report_html)
                    key_values = staff_report_href.split("?")
                    key_values = key_values[1].split("&")
                    dict_values = process_kvs(key_values)
                    if len(s_r_processed) != 0:
                        s_r_processed["MeetingID"] = dict_values["MeetingID"]
                        s_r_processed["ID"] = dict_values["ID"]
                        reports_holder.append(s_r_processed)
                except Exception as e:
                    # We should create a log file to capture this output rather than just printing...
                    print("coult not get: " + staff_report_href)
                    print(e)
                    exit()
    return staff_reports


def process_kvs(key_values):
    '''
    Takes the split key value pairs which are made up of ["key=value", "key=value", "key="]
    value may be empty except for MeetingID and ID keys
    Returns a dictionary with two keys "MeetingID" and "ID"
    '''
    dictionary_vals = dict()
    for kv in key_values:
        key_value = kv.split("=")
        if key_value[0] in {"MeetingID", "ID"}:
            dictionary_vals[key_value[0]] = key_value[1]
    return dictionary_vals


def process_staff_report(staff_report_html):
    '''
    staff_report_html is the HTML text
    '''
    staff_report_soup = BeautifulSoup(staff_report_html, 'html.parser')
    title = staff_report_soup.find('div', {'class': 'LegiFileTitle'})
    if title:
        title = title.text.strip()
    else:
        return []
    info = staff_report_soup.find('div', {'class': 'LegiFileInfo'})
    info_dict = dict()
    info_dict['Title'] = title
    if info:
        info_rows = info.div.table.find_all(['tr'])
        for info_row in info_rows:
            info_headers = info_row.find_all('th')
            info_values = info_row.find_all('td')
            for i in enumerate(info_headers):
                info_dict[i[1].strong.string] = info_values[i[0]].string
    discussion = staff_report_soup.find('div', {'id': 'divItemDiscussion'})
    if discussion != None:
        discussion = discussion.text.replace(
            'Recommended Action', '').replace('\xa0', '').strip()
        info_dict['Recommendations'] = discussion
    body = staff_report_soup.find('div', {'id': 'divBody'})
    if body != None:
        body_paragraphs = []
        paragraphs = body.div.div.find_all('p')
        for paragraph in paragraphs:
            cleaned = paragraph.text.replace('\xa0', '').strip()
            if cleaned:
                body_paragraphs.append(cleaned)
        info_dict['Body'] = body_paragraphs
    return info_dict
